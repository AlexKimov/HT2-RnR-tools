//------------------------------------------------
//--- 010 Editor v8.0.1 Script File
//
//
//      File: n3dToobj.sc
//   Authors: Alexandr Evdokimov
//   Version: 0.01
//   Purpose: B3D to Objs conversion
//
//   History: 
//    
//   2018.10 v0.01 Initial release
//
//------------------------------------------------

local byte TextureNamesArray[10000], TexturePos[1000];
local int MatIndex[1000], index;
local uint TextureCount;
local uint i, size, faceIndex, texindex, pos, pos2, count, count2, length, z, ID, type, type2;
local float coordX, coordY, coordZ, coordU, coordV;
local int FileIndex, Mtl, Obj = -1;
local float coord;
local float normalX, normalY, normalZ;
local uint facein1, facein2, facein3;
local string Str, Str2, NormalLine, FaceLine, XYZLine, UVLine, FileName, Path;
local uchar Name[32];
local char b[4];  

string IntToStr (uint i) {
  local string s;
  SPrintf(s, "%d", i);
  return s;
} 

string getPaletteColor(uint i) {
  local string Str;
  float Palette[768] = { 0.000000, 0.000000, 0.000000, 0.246094, 0.246094, 0.246094, 0.496094, 0.496094, 0.496094, 0.746094, 0.746094, 0.746094, 0.996094, 0.996094, 0.996094, 0.996094, 0.000000, 0.000000, 0.996094, 0.996094, 0.000000, 0.996094, 0.000000, 0.996094, 0.042969, 0.042969, 0.042969, 0.015625, 0.015625, 0.015625, 0.800781, 0.800781, 0.898438, 0.199219, 0.199219, 0.199219, 0.078125, 0.117188, 0.156250, 0.046875, 0.046875, 0.046875, 0.167969, 0.167969, 0.167969, 0.996094, 0.710938, 0.121094, 0.953125, 0.953125, 0.996094, 0.691406, 0.695313, 0.714844, 0.437500, 0.437500, 0.437500, 0.117188, 0.117188, 0.117188, 0.156250, 0.199219, 0.097656, 0.691406, 0.695313, 0.714844, 0.996094, 0.996094, 0.996094, 0.996094, 0.996094, 0.996094, 0.042969, 0.089844, 0.089844, 0.320313, 0.320313, 0.320313, 0.371094, 0.371094, 0.371094, 0.421875, 0.421875, 0.421875, 0.472656, 0.472656, 0.472656, 0.519531, 0.519531, 0.519531, 0.570313, 0.570313, 0.570313, 0.621094, 0.621094, 0.621094, 0.671875, 0.671875, 0.671875, 0.820313, 0.820313, 0.820313, 0.968750, 0.968750, 0.968750, 0.199219, 0.230469, 0.246094, 0.421875, 0.531250, 0.660156, 0.199219, 0.246094, 0.093750, 0.894531, 0.000000, 0.000000, 0.996094, 0.199219, 0.000000, 0.800781, 0.800781, 0.898438, 0.800781, 0.800781, 0.898438, 0.996094, 0.199219, 0.000000, 0.156250, 0.230469, 0.101563, 0.691406, 0.000000, 0.000000, 0.890625, 0.890625, 0.042969, 0.117188, 0.117188, 0.117188, 0.156250, 0.199219, 0.097656, 0.898438, 0.898438, 0.996094, 0.003906, 0.003906, 0.003906, 0.691406, 0.695313, 0.714844, 0.437500, 0.437500, 0.437500, 0.996094, 0.710938, 0.121094, 0.953125, 0.953125, 0.996094, 0.042969, 0.089844, 0.089844, 0.320313, 0.320313, 0.320313, 0.371094, 0.371094, 0.371094, 0.421875, 0.421875, 0.421875, 0.472656, 0.472656, 0.472656, 0.519531, 0.519531, 0.519531, 0.570313, 0.570313, 0.570313, 0.621094, 0.621094, 0.621094, 0.671875, 0.671875, 0.671875, 0.820313, 0.820313, 0.820313, 0.968750, 0.968750, 0.968750, 0.199219, 0.230469, 0.246094, 0.421875, 0.531250, 0.660156, 0.199219, 0.246094, 0.093750, 0.894531, 0.000000, 0.000000, 0.820313, 0.820313, 0.820313, 0.968750, 0.968750, 0.968750, 0.199219, 0.230469, 0.246094, 0.421875, 0.531250, 0.660156, 0.199219, 0.246094, 0.093750, 0.003906, 0.003906, 0.003906, 0.691406, 0.695313, 0.714844, 0.437500, 0.437500, 0.437500, 0.996094, 0.710938, 0.121094, 0.953125, 0.953125, 0.996094, 0.042969, 0.089844, 0.089844, 0.320313, 0.320313, 0.320313, 0.371094, 0.371094, 0.371094, 0.421875, 0.421875, 0.421875, 0.472656, 0.472656, 0.472656, 0.519531, 0.519531, 0.519531, 0.570313, 0.570313, 0.570313, 0.621094, 0.621094, 0.621094, 0.671875, 0.671875, 0.671875, 0.820313, 0.820313, 0.820313, 0.968750, 0.968750, 0.968750, 0.199219, 0.230469, 0.246094, 0.421875, 0.531250, 0.660156, 0.199219, 0.246094, 0.093750, 0.820313, 0.820313, 0.820313, 0.968750, 0.968750, 0.968750, 0.199219, 0.230469, 0.246094, 0.421875, 0.531250, 0.660156, 0.199219, 0.246094, 0.093750, 0.898438, 0.898438, 0.996094, 0.003906, 0.003906, 0.003906, 0.500000, 0.500000, 0.500000, 0.750000, 0.750000, 0.750000, 0.003906, 0.003906, 0.003906, 0.871094, 0.917969, 0.941406, 0.996094, 0.996094, 0.996094, 0.386719, 0.386719, 0.753906, 0.457031, 0.425781, 0.179688, 0.597656, 0.671875, 0.757813, 0.820313, 0.773438, 0.707031, 0.812500, 0.582031, 0.339844, 0.859375, 0.660156, 0.660156, 0.074219, 0.074219, 0.074219, 0.289063, 0.289063, 0.289063, 0.289063, 0.289063, 0.289063, 0.074219, 0.074219, 0.074219, 0.074219, 0.074219, 0.074219, 0.074219, 0.074219, 0.074219, 0.074219, 0.074219, 0.074219, 0.074219, 0.074219, 0.074219, 0.074219, 0.074219, 0.074219, 0.238281, 0.398438, 0.144531, 0.238281, 0.398438, 0.144531, 0.382813, 0.398438, 0.507813, 0.382813, 0.398438, 0.507813, 0.718750, 0.761719, 0.761719, 0.718750, 0.761719, 0.761719, 0.488281, 0.488281, 0.468750, 0.199219, 0.199219, 0.199219, 0.156250, 0.230469, 0.101563, 0.691406, 0.000000, 0.000000, 0.890625, 0.890625, 0.042969, 0.156250, 0.199219, 0.097656, 0.117188, 0.117188, 0.117188, 0.156250, 0.199219, 0.097656, 0.117188, 0.117188, 0.117188, 0.898438, 0.898438, 0.996094, 0.003906, 0.003906, 0.003906, 0.691406, 0.695313, 0.714844, 0.437500, 0.437500, 0.437500, 0.996094, 0.710938, 0.121094, 0.953125, 0.953125, 0.996094, 0.820313, 0.820313, 0.820313, 0.042969, 0.089844, 0.089844, 0.320313, 0.320313, 0.320313, 0.371094, 0.371094, 0.371094, 0.421875, 0.421875, 0.421875, 0.472656, 0.472656, 0.472656, 0.519531, 0.519531, 0.519531, 0.570313, 0.570313, 0.570313, 0.621094, 0.621094, 0.621094, 0.671875, 0.671875, 0.671875, 0.968750, 0.968750, 0.968750, 0.199219, 0.230469, 0.246094, 0.421875, 0.531250, 0.660156, 0.199219, 0.246094, 0.093750, 0.898438, 0.898438, 0.996094, 0.003906, 0.003906, 0.003906, 0.820313, 0.820313, 0.820313, 0.320313, 0.320313, 0.320313, 0.371094, 0.371094, 0.371094, 0.421875, 0.421875, 0.421875, 0.472656, 0.472656, 0.472656, 0.519531, 0.519531, 0.519531, 0.570313, 0.570313, 0.570313, 0.621094, 0.621094, 0.621094, 0.671875, 0.671875, 0.671875, 0.968750, 0.968750, 0.968750, 0.199219, 0.218750, 0.238281, 0.871094, 0.917969, 0.941406, 0.996094, 0.996094, 0.996094, 0.386719, 0.386719, 0.753906, 0.457031, 0.425781, 0.179688, 0.386719, 0.386719, 0.753906, 0.996094, 0.996094, 0.996094, 0.996094, 0.996094, 0.996094, 0.597656, 0.671875, 0.757813, 0.859375, 0.660156, 0.660156, 0.812500, 0.582031, 0.339844, 0.820313, 0.773438, 0.707031, 0.691406, 0.695313, 0.714844, 0.437500, 0.437500, 0.437500, 0.996094, 0.710938, 0.121094, 0.953125, 0.953125, 0.996094, 0.996094, 0.996094, 0.996094, 0.289063, 0.289063, 0.289063, 0.289063, 0.289063, 0.289063, 0.238281, 0.398438, 0.144531, 0.238281, 0.398438, 0.144531, 0.382813, 0.398438, 0.507813, 0.382813, 0.398438, 0.507813, 0.718750, 0.761719, 0.761719, 0.718750, 0.761719, 0.761719, 0.156250, 0.230469, 0.101563, 0.691406, 0.000000, 0.000000, 0.890625, 0.890625, 0.042969, 0.488281, 0.488281, 0.468750, 0.488281, 0.488281, 0.468750, 0.156250, 0.230469, 0.101563, 0.691406, 0.000000, 0.000000, 0.890625, 0.890625, 0.042969, 0.074219, 0.074219, 0.074219, 0.074219, 0.074219, 0.074219, 0.074219, 0.074219, 0.074219, 0.074219, 0.074219, 0.074219, 0.074219, 0.074219, 0.074219, 0.074219, 0.074219, 0.074219, 0.074219, 0.074219, 0.074219, 0.597656, 0.796875, 0.996094, 0.597656, 0.796875, 0.996094, 0.421875, 0.531250, 0.660156, 0.199219, 0.246094, 0.093750, 0.820313, 0.820313, 0.820313, 0.320313, 0.320313, 0.320313, 0.371094, 0.371094, 0.371094, 0.421875, 0.421875, 0.421875, 0.472656, 0.472656, 0.472656, 0.519531, 0.519531, 0.519531, 0.570313, 0.570313, 0.570313, 0.621094, 0.621094, 0.621094, 0.671875, 0.671875, 0.671875, 0.968750, 0.968750, 0.968750, 0.199219, 0.218750, 0.238281, 0.898438, 0.898438, 0.996094, 0.003906, 0.003906, 0.003906, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.996094, 0.964844, 0.808594, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.195313, 0.230469, 0.070313 };
  SPrintf(Str, "%1.4f %1.4f %1.4f", Palette[i*3], Palette[i*3 + 1], (Palette[i*3 + 2]));

  return Str;
};

uint getNumber(string Str) {
  local uint pos = 0, count = 0;
  local string S;
  pos = Strchr(Str, ' ');
  S = SubStr(Str, pos + 1, Strlen(Str) - pos);
  if (SScanf(S, "%d", count) > 0)
    return count;
  else
    return 1;
}

uint strToInt(string str)
{
  return Atoi(str);
};

uint getValue(string str, uint pos)
{
  local uint length;
  str = SubStr(str, pos + 3, sizeof(str) - pos);
  while (str[0] == ' ')
    str = StrDel(str, 0, 1);
  length = Strchr(str, ' ');
  if (length)
    str = SubStr(str, 0, length);
  return strToInt(str); 
};

// get index from materials properties string
int getIndex(string str)
{
  local int index, pos;
  if (Strstr(str, "tex") > 0)
  {
    pos = Strstr(str, "tex");
    index = getValue(str, pos);
  } 
  else  
    if (Strstr(str, "ttx") > 0) 
    {
      pos = Strstr(str, "ttx");
      index = getValue(str, pos);
    }
  else
    if (Strstr(str, "itx") > 0)
    {
      pos = Strstr(str, "itx");
      index = getValue(str, pos);
    } 
  else
    if (Strstr(str, "col") > 0)
    {
      if (Strstr(str, "col") == 0)
        DelStr(str, 0, Strchr(str, ' '));
      pos = Strstr(str, "col");
      index = -getValue(str, pos);
    }; 
  return index;
};

string extractName(string FileName)
{
  return SubStr(FileName, 0, Strchr(FileName, '.'));
};

FileIndex = GetFileNum();
FileName = GetFileName();
Path = FileName + "_objs\\";
MakeDir(Path); // current dir

// get texture names from res
Str = extractName(FileName) + ".res";
FileOpen( Str );

while (1)
{
  Str = ReadString(FTell());
  count = getNumber(Str);
  length = ReadStringLength(FTell());
  FSkip(length); 
  if (count)
    if (SubStr(Str, 0, 4) == "TEXT" || SubStr(Str, 0, 4) == "BACK" || SubStr(Str, 0, 4) == "MASK" || SubStr(Str, 0, 4) == "SOUN" || SubStr(Str, 0, 4) == "PALE")
    {
      if (SubStr(Str, 0, 4) == "TEXT")    
      {
        pos = 0; 
        for ( i = 0; i < count; ++i )
        {          
          Str = ReadString(FTell());
          length = ReadStringLength(FTell());
          SPrintf(b, "%d", length);
          Memcpy(TextureNamesArray, b, 4, pos, 0);
          Memcpy(TextureNamesArray, Str, length, pos + 4, 0);
          TexturePos[i] = pos;
          pos += length + 4;
          FSkip(length);
          size = ReadInt(FTell());
          FSkip(size + 4);           
        };
      }
      else
      {
        for ( i = 0; i < count; ++i )
        {
          length = ReadStringLength(FTell());
          FSkip(length);  
          size = ReadInt(FTell());
          FSkip(size + 4); 
        }         
      };
    }
    else
    {
      if (SubStr(Str, 0, 4) == "MATE")
      {    
        for ( i = 0; i < count; ++i )
        {           
          Str = ReadString(FTell());
          length = ReadStringLength(FTell()); 
          MatIndex[i] = getIndex(Str);     
          FSkip(length);
        };            
        break;
      }
      else
      {
        for ( i = 0; i < count; ++i )
        {           
          length = ReadStringLength(FTell()); 
          FSkip(length);
        };
      };
    }; 
};
FileClose();

Mtl = FileNew("Text"); // create .mtl file

// skip Header
FileSelect(FileIndex);
FSkip(24);

count = ReadInt(FTell());
FSkip(4);
local byte MaterailArray[count*32];
pos = 0;  
pos2 = 0;
for ( i = 0; i < count; ++i )
{
  FileSelect(FileIndex);
  // read Material
  ReadBytes(Name, FTell(), 32);
  Memcpy(MaterailArray, Name, 32, pos, 0);
  pos += 32; 
  FSkip(32); 
  // add Material to MTl file
  FileSelect(Mtl);
  SPrintf(Str, "# material %d\n", i);
  TextWriteLine(Str, pos2);
  TextWriteLine("newmtl " + Name + "\n", pos2 + 1);
  index = MatIndex[i];
  if (index > 0)
  {    
    Memcpy(b, TextureNamesArray, 4, 0, TexturePos[index]);
    size = Atoi(b);
    Memcpy(Name, TextureNamesArray, size, 0, TexturePos[index] + 4);
    TextWriteLine("map_Kd " + Name + "\n", pos2 + 2);
  }
  else
  {
    SPrintf(Str, "Kd %s", getPaletteColor(-(index)));
    TextWriteLine(Str + "\n", pos2 + 2);
  };
  pos2 += 3;
};

local string MTLFileName = FileNameGetBase(extractName(FileName));
FileSave(Path + MTLFileName + ".mtl");
FileClose();

FileSelect(FileIndex);
FSkip(4);

// chunks

UINT chunkTree(UINT ChildCount) 
{
  local uint i, k, fi;
  fi = faceIndex;
  for ( i = 0; i < ChildCount; ++i )
  {
    ID = ReadInt(FTell());    
    if (ID == 444)
      FSkip(4);
    FSkip(4);
    ReadBytes(Name, FTell(), 32);
    FSkip(32);
    ID = ReadInt(FTell()); 
    FSkip(4);    

    switch ( ID ) 
    {
      case 0: 
      {
        FSkip(44);        
      }; 
      break;
      case 1: 
      {
        FSkip(64);
      }; 
      break;
      case 2: 
      {
        FSkip(32);
        count = ReadInt(FTell()); 
        FSkip(4);
        chunkTree(count);
      }; 
      break;
      case 3: 
      {
        FSkip(16);
        count = ReadInt(FTell()); 
        FSkip(4);
        chunkTree(count);
      }; 
      break;
      case 4: 
      {
        FSkip(80);
        count = ReadInt(FTell()); 
        FSkip(4);
        chunkTree(count);
      }; 
      break;
      case 5: 
      {
        Obj = FileNew("Text"); // create .obj file
        TextWriteLine("mtllib " + MTLFileName + ".mtl" + "\n", pos);
        pos = 1;
        FileName = Name;       // filename
        FileSelect(FileIndex);       
        FSkip(48);
        count = ReadInt(FTell()); 
        FSkip(4);
        chunkTree(count);
      };
      break;
      case 6: 
      {
        FSkip(80);
        count = ReadInt(FTell()); 
        FSkip(4);
        k = 0;
        while (k < count)  
        {
          FSkip(20);
          ++k;
        };      
        count = ReadInt(FTell()); 
        FSkip(4);
        chunkTree(count);
      };
      break;
      case 7: 
      {
        FileSelect(Obj);   

        TextWriteLine("# Object\n", pos);
        ++pos;    
        TextWriteLine("o " + Name + "\n", pos);
        ++pos;
        XYZLine = "";
        UVLine = "";
        FaceLine = ""; 

        FileSelect(FileIndex); 
        FSkip(48);
        count = ReadInt(FTell()); 
        FSkip(4);
        XYZLine = "";
        UVLine = "";
        pos2 = count;
        for ( z = 0; z < count; ++z )  
        {
          coordX = ReadFloat(FTell());
          FSkip(4);
          coordY = ReadFloat(FTell());
          FSkip(4);
          coordZ = ReadFloat(FTell());
          FSkip(4);
          coordU = ReadFloat(FTell());
          FSkip(4);
          coordV = ReadFloat(FTell()); 
          FSkip(4);
          SPrintf(Str, "v %f %f %f\n", coordX, coordY, coordZ);
          Strcat(XYZLine, Str);
          SPrintf(Str, "vt %f %f\n", coordU, coordV);
          Strcat(UVLine, Str);                        
        };   

        FileSelect(Obj);
        // vertex coordinates
        TextWriteLine(XYZLine + "\n", pos);
        pos += pos2;
        // uv coordinates
        TextWriteLine(UVLine + "\n", pos);
        pos += pos2;
        FileSelect(FileIndex);

        count = ReadInt(FTell()); 
        FSkip(4);
        chunkTree(count);
      };
      break;
      case 8: 
      {
        FSkip(16);
        count = ReadInt(FTell()); 
        FSkip(4);
        k = 0;

        FaceLine = "";
        Str2 = "";  
        pos2 = count;  

        while (k < count)  
        {
          type = ReadInt(FTell()); 
          FSkip(4 + 12);

          count2 = ReadInt(FTell());
          FSkip(4);
  
          switch (type)
          {
            case 131:
            {
              for ( z = 0; z < count2; ++z ) 
              {
                FSkip(12);
              };
            };
            break;
            case 129:
            {
              for ( z = 0; z < count2; ++z ) 
              {
                SPrintf(Str, " %d", ReadInt(FTell()) + 1);
                Str2 += Str;  
                FSkip(4);                
              };                         
              Str2 = "f" + Str2 + "\n"; 
              Strcat(FaceLine, Str2);   
              Str2 = "";  
            };
            break;
            case 3:
            {
              for ( z = 0; z < count2; ++z ) 
              {
                FSkip(12);                
              };
            };
            break;
            case 176:
            {
              for ( z = 0; z < count2; ++z ) 
              {
                FSkip(16);                
              };
            };
            break;
            case 51:
            {
              for ( z = 0; z < count2; ++z ) 
              {
                FSkip(16);                
              };
            };
            break;
            case 179:
            {
              for ( z = 0; z < count2; ++z ) 
              {
                FSkip(16);                 
              };
            };
            break;
            case 177:
            {
              for ( z = 0; z < count2; ++z ) 
              {
                FSkip(8);                 
              };
            };
            break;
            case 48:
            {
              for ( z = 0; z < count2; ++z ) 
              {
                FSkip(16);                 
              };
            };
            break;
            case 178:
            case 50:
            {
              for ( z = 0; z < count2; ++z ) 
              {
                SPrintf(Str, " %d", ReadInt(FTell()) + 1);
                Str2 += Str;  
                FSkip(24);                
              };                         
              Str2 = "f" + Str2 + "\n"; 
              Strcat(FaceLine, Str2);   
              Str2 = "";  
            };
            break;
            default: 
            {
              FSkip(4*count2); 
              if (type == 2)
                FSkip(4*count2); 
            }; 
          };        
          ++k;
        };      
        //
        FileSelect(Obj);
        // vertex coordinates
        if (FaceLine != "") 
        {
          TextWriteLine(FaceLine + "\n", pos);
          pos += pos2;
        };
        faceIndex = count;
        FileSelect(FileIndex); 
      }; 
      break;
      case 9: 
      {
        FSkip(32);
        count = ReadInt(FTell()); 
        FSkip(4);
        chunkTree(count);
      };
      break;
      case 10: 
      {
        FileSelect(Obj);
        TextWriteLine("# LOD Group\n", pos);
        ++pos;  
        FileSelect(FileIndex);   
        FSkip(32);
        count = ReadInt(FTell()); 
        FSkip(4);
        chunkTree(count);
      };
      break;
      case 11: 
      {
        FSkip(48);
        count = ReadInt(FTell()); 
        FSkip(4);
        chunkTree(count);
      };
      break;
      case 12: 
      {
        FSkip(40);
        count = ReadInt(FTell()); 
        FSkip(4);
        chunkTree(count);
      };
      break;
      case 13: 
      {
        FSkip(24);
        count = ReadInt(FTell()); 
        FSkip(4);  
        FSkip(4*count);          
      };
      break;
      case 14: 
      {
        FSkip(44);       
      };
      break;
      case 16: 
      {
        FSkip(60);       
      };
      break;
      case 17: 
      {
        FSkip(60);       
      };
      break;
      case 18: 
      {
        FSkip(80);       
      };
      break;
      case 19: 
      {
        //
        Obj = FileNew("Text"); // create .obj file
        FileName = Name;       // filename
        FileSelect(FileIndex); 
        //
        count = ReadInt(FTell()); 
        FSkip(4);
        chunkTree(count);      
      };
      break;
      case 20: 
      {
        count = ReadInt(FTell());
        FSkip(20);
        count2 = ReadInt(FTell()); 
        for ( z = 0; z < count; ++z ) 
        {
          FSkip(12);                 
        };
        FSkip(4*count2);       
      };
      break;
      case 21: 
      {
        FSkip(24);
        count = ReadInt(FTell()); 
        FSkip(4);
        chunkTree(count);    
      };
      break;
      case 23: 
      {
        FSkip(8);
        type = ReadInt(FTell());
        switch (type)   
        {
          case 3:
          {
            FSkip(12);
            count = ReadInt(FTell()); 
            FSkip(4);
            for ( z = 0; z < count; ++z ) 
            {
              count = ReadInt(FTell()); 
              FSkip(4);   
              for ( k = 0; k < count; ++k ) 
              {
                FSkip(12);                              
              };                           
            };            
          };
          break;
          case 2:
          {
            FSkip(12);
            count = ReadInt(FTell()); 
            FSkip(4);
            for ( z = 0; z < count; ++z ) 
            {
              count = ReadInt(FTell()); 
              FSkip(4);   
              for ( k = 0; k < count; ++k ) 
              {
                FSkip(40);                              
              };                           
            };
          };
          break;
          default:
          {
            count = ReadInt(FTell()); 
            FSkip(4);
            for ( z = 0; z < count; ++z ) 
            {
              count = ReadInt(FTell()); 
              FSkip(4);   
              for ( k = 0; k < count; ++k ) 
              {
                FSkip(12);                              
              };                           
            };
          };
        };  
      };
      break;
      case 24: 
      {
        FSkip(52); 
        count = ReadInt(FTell()); 
        FSkip(4);
        chunkTree(count);    
      };
      break;
      case 25: 
      {
        FSkip(88);   
      };
      break;
      case 28: 
      {
        FSkip(28);   
        count = ReadInt(FTell()); 
        FSkip(4);
        for ( k = 0; k < count; ++k ) 
        {
          type = ReadInt(FTell());            
          FSkip(16);  
          count = ReadInt(FTell()); 
          FSkip(4);
          for ( z = 0; z < count; ++z ) 
          { 
            if (type == 4294967040) 
            {
              FSkip(8);
            }
            else
            {
              FSkip(16);            
            };                            
          }; 
        };    
      };
      break;
      case 29: 
      {
        FSkip(16);
        type = ReadInt(FTell()); 
        FSkip(32);
        if (type != 3)
          FSkip(4);           
        count = ReadInt(FTell()); 
        FSkip(4);
        chunkTree(count);    
      };
      break;
      case 30: 
      {
        FSkip(48);
        FSkip(24);
      };
      break;
      case 31: 
      {
        FSkip(16);
        count = ReadInt(FTell()); 
        FSkip(36); 
        for ( k = 0; k < count; ++k ) 
        {
          FSkip(12);                              
        };   
      };
      break;
      case 34: 
      {
        FSkip(20);
        count = ReadInt(FTell()); 
        FSkip(4); 
        for ( k = 0; k < count; ++k ) 
        {
          FSkip(16);                              
        };   
      };
      break;
      case 35: 
      {
        
        FileSelect(FileIndex);
        FSkip(16);
        type = ReadInt(FTell());  
        FSkip(4); 
        texindex = ReadInt(FTell()); 
        FSkip(4); 
        count = ReadInt(FTell()); 
        FSkip(4);
        FaceLine = "";
        Str2 = "";  
        pos2 = count;  

        for ( k = 0; k < count; ++k ) 
        {     
 
          type2 = ReadInt(FTell());  
          FSkip(16); 
          count2 = ReadInt(FTell());
          FSkip(4);  
          
            switch (type)
            {
              case 3:
              {
                facein1 = ReadInt(FTell()) + 1;
                FSkip(4);
                facein2 = ReadInt(FTell()) + 1;
                FSkip(4);
                facein3 = ReadInt(FTell()) + 1;
                FSkip(4);
                SPrintf(Str, "f %d %d %d\n", facein1 + fi, facein2 + fi, facein3 + fi);
                Strcat(FaceLine, Str);
              };
              break;
              case 2:
              {
                switch (type2) 
                {
                  case 49:
                  {
                    FSkip(8*count2);
                  };
                  break;
                  case 51:
                  {
                    FSkip(8*count2);
                  };
                  break;
                  default:
                  {
                    facein1 = ReadInt(FTell()) + 1;
                    FSkip(4);
                    facein2 = ReadInt(FTell()) + 1;
                    FSkip(4);
                    facein3 = ReadInt(FTell()) + 1;
                    FSkip(4);
                    SPrintf(Str, "f %d %d %d\n", facein1 + fi, facein2 + fi, facein3 + fi);
                    Strcat(FaceLine, Str);
                    if (type2 == 3) 
                    {
                      FSkip(24);
                    };
                  };                
                };              
              };
              break;
              default:
              {
                switch (type2) 
                {
                  case 0:
                  {
                    FSkip(4*count2);
                  };
                  break;
                  case 2:
                  {
                    FSkip(12*count2);
                  };
                  break;
                  default:
                  {
                    for ( z = 0; z < count2; ++z ) 
                    {
                       SPrintf(Str, " %d", ReadInt(FTell()) + 1);
                       Str2 += Str;  
                       FSkip(16);     
                       if (type2 == 50) 
                         FSkip(8);            
                    };                         
                    Str2 = "f" + Str2 + "\n"; 
                    Strcat(FaceLine, Str2);   
                    Str2 = "";                                   
                  };                
                };                          
              };                                   
          }; 
        };
        FileSelect(Obj);
        // vertex coordinates
        if (FaceLine != "") 
        {
          TextWriteLine(FaceLine + "\n", pos);
          pos += pos2;
        };
        faceIndex = count;
        FileSelect(FileIndex);         
      };
      break;
      case 36: 
      {
        FSkip(80);
        type = ReadInt(FTell());
        FSkip(4); 
        count = ReadInt(FTell()); 
        FSkip(4); 
        if (type == 2) 
        {
          for ( k = 0; k < count; ++k ) 
          {
            FSkip(32);                              
          }; 
        }
        else
        {
          for ( k = 0; k < count; ++k ) 
          {
            FSkip(24);                              
          }; 
        };  
        count = ReadInt(FTell()); 
        FSkip(4);
        chunkTree(count);   
      };
      break;
      case 37: 
      {
        FileSelect(Obj);
        TextWriteLine("# Object\n", pos);
        ++pos;        
        TextWriteLine("o " + Name + "\n", pos);
        ++pos;
        XYZLine = "";
        UVLine = "";
        NormalLine = "";
        FaceLine = ""; 
        FileSelect(FileIndex); 
        //        
        FSkip(48);
        type = ReadInt(FTell());
        FSkip(4); 
        count = ReadInt(FTell()); 
        FSkip(4); 
        pos2 = count;

        switch (type)
        {
          case 515:
          {
            for ( k = 0; k < count; ++k ) 
            {
              FSkip(40);                              
            }; 
          };
          break;
          case 514:
          {
            for ( k = 0; k < count; ++k ) 
            {
              FSkip(48);                              
            }; 
          };
          break;
          case 258:
          {
            for ( k = 0; k < count; ++k ) 
            {
              FSkip(40);                              
            }; 
          };
          break;
          case 2:
          {
            for ( k = 0; k < count; ++k ) 
            {
              coordX = ReadFloat(FTell());
              FSkip(4);
              coordY = ReadFloat(FTell());
              FSkip(4);
              coordZ = ReadFloat(FTell());
              FSkip(4);

              coordU = ReadFloat(FTell());
              FSkip(4);
              coordV = ReadFloat(FTell()); 
              FSkip(4);

              normalX = ReadFloat(FTell());
              FSkip(4);
              normalY = ReadFloat(FTell());
              FSkip(4);
              normalZ = ReadFloat(FTell());
              FSkip(4);

              SPrintf(Str, "v %f %f %f\n", coordX, coordY, coordZ);
              Strcat(XYZLine, Str);
              SPrintf(Str, "vt %f %f\n", coordU, coordV);
              Strcat(UVLine, Str);
              SPrintf(Str, "vn %f %f %f\n", normalX, normalY, normalZ);
              Strcat(NormalLine, Str);                             
            }; 
          };
          break;
          case 3:
          {
            for ( k = 0; k < count; ++k ) 
            {
              coordX = ReadFloat(FTell());
              FSkip(4);
              coordY = ReadFloat(FTell());
              FSkip(4);
              coordZ = ReadFloat(FTell());
              FSkip(4);
              coordU = ReadFloat(FTell());
              FSkip(4);
              coordV = ReadFloat(FTell()); 
              FSkip(4);
              FSkip(4);
              SPrintf(Str, "v %f %f %f\n", coordX, coordY, coordZ);
              Strcat(XYZLine, Str);
              SPrintf(Str, "vt %f %f\n", coordU, coordV);
              Strcat(UVLine, Str);                           
            }; 
          };
          break;
        };

        FileSelect(Obj);
        // vertex coordinates
        TextWriteLine(XYZLine + "\n", pos);
        pos += pos2;
        // uv coordinates
        TextWriteLine(UVLine + "\n", pos);
        pos += pos2;
        if (NormalLine != "")
        {
          // normal coordinates
          TextWriteLine(NormalLine + "\n", pos);
          pos += pos2;
        };

        FileSelect(FileIndex);
        count = ReadInt(FTell()); 
        FSkip(4);
        chunkTree(count);   
      };
      break;
      case 39: 
      {
        FSkip(36);        
        count = ReadInt(FTell()); 
        FSkip(4);
        chunkTree(count);    
      };
      break;
      case 40: 
      {
        FSkip(80);         
        FSkip(8);
        count = ReadInt(FTell()); 
        FSkip(4*count);  
      };
    };
    ID = ReadInt(FTell()); 
    while (ID == 444) 
    {  
      FSkip(4);
      ID = ReadInt(FTell()); 
    };
    FSkip(4); // skip chunk Name
  };
  return 0;
};

while (chunkTree(1) == 0)
{
  if (Obj >= 1)
  {
    FileSelect(Obj);
    faceIndex = 0;
    FileSave(Path + FileName + ".obj");
    FileClose();
    Obj = -1;    
  };
  if (FileName == "store_ap") break;
  FileSelect(FileIndex);
  ID = ReadInt(FTell());
  if (ID == 222)       
    return 1;
};
