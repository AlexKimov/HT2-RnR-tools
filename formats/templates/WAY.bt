//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: WAY.bt
//   Authors: Alexandr Evdokimov
//   Version: 0.1
//   Purpose: Hard truck 2 WAY file
//
//   History: 
//    
//   2018.05 v 0.1 initial release 
//
//------------------------------------------------

local uchar i[4];

typedef enum <char> {
  MNAM, // = Name
  GDAT, //
  GROM,
  RNAM, // = Room Name
  RNOD, // = Room Node
  NNAM, // = node name
  POSN, // = position
  WDTH, // = width
  RSEG, // = Room Segment
  ATTR, // = Attributes
  VDAT, //
  FLAG //
} IDENTIFIER;


struct {
  char WTWR[4] <name="WTWR signature">;
  UINT DataSize; // File size - 8
  IDENTIFIER id1[4];
  UINT Count; //
  char RegionShortName[4] <name="Region Short Name">;
  IDENTIFIER id12[4];  
  UINT DataSize; // File size - Header size
} Header <name="File Header">;

while (!FEof()) 
{ 
  struct {
    IDENTIFIER ID[4];
    if (ID == "GROM")
    {
      struct {
        UINT ChunkSize; //
        IDENTIFIER id4[4];
        struct {
          UINT NameLengh; //
          char Name[12]; 
        } NAME <name="Room Name">;  
      } CHUNK_HEADER <name="Chunk Header">;

      while (!FEof())  
      {     
        ReadBytes(i, FTell(), 4); 
        if (i == "GROM") break;
        struct { 
          IDENTIFIER id[4];
        } PID;
        if (PID.id == "RNOD") 
        {
          struct {
            UINT DataSize; 
            struct {
              IDENTIFIER id[4];
              UINT NameLengh; //
              if (NameLengh > 12) 
                char Name[16]; 
              else
                char Name[12];
            } NNAM;   
            struct {
              IDENTIFIER id[4];
              UINT SectionSize;
              DOUBLE X;
              DOUBLE Y;
              DOUBLE Z;
            } POSN;
            IDENTIFIER id[4]; 
            if (id == "FLAG")
              struct {        
                UINT SectionSize;
                UINT Unknown;
              } FLAG; 
            else
              struct {        
                UINT SectionSize;
                struct {
                  DOUBLE X;
                  DOUBLE Y;
                  DOUBLE Z;
                } X;
                struct {
                  DOUBLE X;
                  DOUBLE Y;
                  DOUBLE Z;
                } Y;
                struct {
                  DOUBLE X;
                  DOUBLE Y;
                  DOUBLE Z;
                } Z;
                struct {
                  DOUBLE X;
                  DOUBLE Y;
                  DOUBLE Z;
                } Pos;
              } ORTN;  
          } RNOD <name="RNOD">;
        };
  
        if (PID.id == "RSEG") 
        {
          struct {
            UINT DataSize;  
            struct {
              IDENTIFIER id[4];
              UINT SectionSize;
              UINT Unknown;
              DOUBLE Unknown;
              UINT Unknown; 
            } ATTR; 
            struct {
              IDENTIFIER id[4];
              UINT SectionSize;
              DOUBLE Unknown;
              DOUBLE Unknown; 
            } WDTH; 
            struct {
              IDENTIFIER id[4];
              UINT DataSize;
              UINT Count;
              struct { 
                DOUBLE X;
                DOUBLE Y;
                DOUBLE Z;
              } P[Count];  
            } VDAT; 
          } RNOD <name="RSEG">;
        };
      };
    };
  } GROM;
}


