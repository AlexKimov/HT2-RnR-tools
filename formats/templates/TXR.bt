//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

typedef enum <char> {
  PFRM,
  LVMP,
  ENDR
} IDENTIFIER;

typedef struct {
  UINT SectionSize;
  UINT type;
  UINT Width;
  UINT Height; 
  UINT HS; 
  local uint w,h;
  w = Width; h = Height;
  while (w >= 1) {
    typedef struct {  
      UINT16 Pixel;
    } PIXEL_RGB16; 
    typedef struct (int arraySize) {
      PIXEL_RGB16 array[arraySize];
    } PIXEL_RGB16_Array; 
    PIXEL_RGB16_Array Pixels(w*h);
    w = w/2; h = h/2;
  };
  BYTE A[2];  
} LVMP;

typedef struct {
  UINT SectionSize;
  UINT RedMask;
  UINT GreenMask;
  UINT BlueMask;
  UINT AlphaMask; 
  BYTE B[12];
  IDENTIFIER ID[4];
} PFRM;

BitfieldDisablePadding();

typedef struct { 
  UBYTE Red: 5;
  UBYTE Green: 6;
  UBYTE Blue: 5;
} RGB565;

typedef struct {          
  UBYTE  IDLength;
  UBYTE  ColorMapType;
  UBYTE  ImageType;
  WORD   FirstIndexEntry;
  WORD   ColorMapLength;
  UBYTE  ColorMapEntrySize; 

  WORD   XOrigin;
  WORD   YOrigin;
  WORD   Width;
  WORD   Height;
  UBYTE  PixelDepth;
  UBYTE  ImageDescriptor;
} TGA_HEADER;

typedef struct {
  ubyte R;
  ubyte G;
  ubyte B;
} PALETTE;

typedef struct { 
  TGA_HEADER TGAHEADER;

  char Name[4]; // Line Offset
  if (Name == "LOFF") 
  {
    UINT SectionSize;
    UINT Offset;
  
    RGB565 Pixel[(Offset - sizeof(TGAHEADER) - 12)/2];

    IDENTIFIER id[4];
    if (id == "LVMP") 
    {
      LVMP lvmpid;
      PFRM pfrmid;
    } else {
      PFRM pfrmid;
    };
  } 
  else
  {
    FSkip(-4); 
    PALETTE palette[256];
    UBYTE Data[23*TGAHEADER.Width/23*TGAHEADER.Height];
  } 
} TXR;

TXR txrFile;